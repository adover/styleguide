@import '../1_settings/_config';
@import '../1_settings/colors';
@import '../1_settings/layouts';
@import '../2_tools/mixins/display-flex';
@import '../2_tools/mixins/media-query';
@import '../2_tools/functions/svg';

$input-border-invalid-color: map-get($colors, shiraz);
$input-border-radius: $radius-default;
$input-border: map-deep-get($config, borders, default);
$input-color: map-get($colors, limed-spruce);
$input-disabled-background-color: map-get($colors, porcelain);
$input-disabled-border-color: map-get($colors, silver-sand);
$input-disabled-color: map-get($colors, regent-gray);
$input-dob-margin-right: $spacing-2;
$input-focus-border-color: map-get($colors, shark);
$input-focus-shadow: $shadow-focus;
$input-font-size: map-deep-get($config, sizes, base, paragraph);
$input-max-width: $max-narrow-width;
$input-margin-bottom: $spacing-1;
$input-padding: map-deep-get($config, spacings, inputs, v) map-deep-get($config, spacings, inputs, h);
$input-placeholder-color: map-get($colors, silver-sand);
$input-container-bottom-margin: $spacing-4;
$input-icon-padding: $spacing-12;
$input-icon-right-offset: $spacing-3;
$input-icon-size: $spacing-4;
$textarea-min-height: $spacing-24;

$input-sizes: (
	narrow: $spacing-20,
	medium: $spacing-32,
);

/// @group atoms

/// Initialiser for all form inputs
/// @name input-init
@mixin input-init($borders: true) {
	-webkit-appearance: none;
	background-color: white;
	border-color: transparent;
	box-shadow: none;
	color: $input-color;
	display: inline-block;

	// Sometimes the font size will be inferred from the element
	// it is contained within, this helps to stop
	// that from happening.
	font-size: $input-font-size;
	height: auto;
	max-width: none;
	padding: $input-padding;
	transition: map-get($transitionSpeed, default) unquote(map-get($transitionEase, default)) all;
	vertical-align: middle;
	width: 100%;

	@include media-query($size: tablet-portrait) {
		max-width: $input-max-width;
	}

	@if $borders {
		@include input-styling();
		@include input-disabled();
	}
}

@mixin input-disabled($selector: '&') {
	&[readonly='true'],
	&:disabled,
	&.is-disabled {
		background-color: $input-disabled-background-color !important;
		border-color: $input-disabled-border-color;
		color: $input-disabled-color;
		cursor: not-allowed;

		&:before,
		input {
			background: transparent !important;
		}
	}
}

/// Apply styling as an input
/// @name input-styling
@mixin input-styling() {
	border: $input-border;
	border-radius: $input-border-radius;
	margin-bottom: $input-margin-bottom;

	&:enabled:focus {
		border-color: $input-focus-border-color;
		box-shadow: $input-focus-shadow;
		outline: none;
	}

	&::placeholder {
		color: $input-placeholder-color;
	}

	&.has-error,
	&.ng-touched.ng-invalid,
	&[aria-invalid='true'] {
		border-color: $input-border-invalid-color;
	}

	input {
		border: none !important;
		margin-bottom: 0 !important;
	}
}
/// TODO
/// @name input-icon
@mixin input-icon($path, $fill-color: 'white', $size: auto) {
	background-image: svg($fill-color: $fill-color, $path: $path);
	background-position: right $input-icon-right-offset center;
	background-repeat: no-repeat;
	background-size: $size;
	padding-right: $input-icon-padding;
	transition: unset;
}

/// TODO
/// @name input-container
/// @group atoms
@mixin input-container($margin-bottom: true, $inline: true) {
	@if ($inline) {
		display: inline-block;
	}

	@if ($margin-bottom) {
		margin-bottom: $input-container-bottom-margin;
	}

	position: relative;
	@content;
}

@mixin input-unstyled() {
	background-color: transparent !important;
	border: 1px solid transparent !important;
	box-shadow: none !important;
	margin-bottom: 0 !important;
}

/// Creates an input effect while resetting the input styling
@mixin input-fake($max-width: $input-max-width) {
	@include display-flex($flex: 1);

	background: white;
	border-radius: $input-border-radius;
	margin-bottom: $input-margin-bottom;
	position: relative;
	width: 100%;
	z-index: 1;

	@include media-query($size: tablet-portrait) {
		max-width: $max-width;
	}

	input,
	button {
		background-color: transparent !important;
		border: 1px solid transparent !important;
		box-shadow: none !important;
		margin-bottom: 0 !important;
	}

	@include input-disabled('&:before');

	&:before {
		@include input-styling();

		background: transparent;
		bottom: 0;
		content: '';
		display: block;
		left: 0;
		margin-bottom: 0;
		pointer-events: none;
		position: absolute;
		right: 0;
		top: 0;
		z-index: 0;
	}

	&:focus-within {
		&:before {
			border-color: $input-focus-border-color;
			box-shadow: $input-focus-shadow;
			outline: none;
		}
	}
}

/// TODO
/// @name input-narrow
/// @group atoms
@mixin input-narrow() {
	max-width: map-get($input-sizes, narrow) !important;
}

/// TODO
/// @name input-fixed-char
/// @group atoms
@mixin input-fixed-char($width: 3ch) {
	box-sizing: content-box;
	max-width: $width !important;
}

/// TODO
/// @name input-medium
/// @group atoms
@mixin input-medium() {
	max-width: map-get($input-sizes, medium) !important;
}

/// TODO
/// @name input-full-width
/// @group atoms
@mixin input-full-width() {
	max-width: none !important;
}

/// For an input with an inset button
/// @name input-button
/// @group atoms
@mixin input-button($child) {
	#{$child} {
		position: absolute;
		@content;
	}
}

@mixin dob-input() {
	input,
	input:not([type='button']):not([type='checkbox']):not([type='submit']):not([type='reset']):not([type='image']):not([type='radio']) {
		@include section-margin($size: default);

		box-sizing: border-box;
		display: inline-block;
		padding: 0.5rem;
		text-align: center;

		&:not(:last-of-type) {
			margin-right: $input-dob-margin-right;
			max-width: $spacing-20 !important;
		}

		&:last-of-type {
			max-width: 6.5rem !important;
		}
	}
}

.ng-touched.ng-dirty.ng-invalid {
	&
		> input:not([type='button']):not([type='checkbox']):not([type='submit']):not([type='reset']):not([type='image']):not([type='radio']),
	.inputContainer {
		border-color: $input-border-invalid-color;
	}
}

.ng-touched.ng-dirty.ng-valid {
	input:not([type='button']):not([type='checkbox']):not([type='submit']):not([type='reset']):not([type='image']):not([type='radio']) {
		&.successIcon {
			@include input-icon($path: tick-sign, $fill-color: fun-green);

			background-size: $spacing-5;
		}
	}
}
