/// TODO
/// @name triangle
/// @group mixins
/// @param $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param $color [currentcolor] - Triangle color
/// @param $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1rem) {
	@if not index(top right bottom left, $direction) {
		@error "[Mixin: Triangle] Direction must be either `top`, `right`, `bottom` or `left`.";
	}

	border-#{opposite-direction($direction)}: ($size) solid $color;
	content: '';
	height: 0;
	width: 0;
	z-index: 2;

	$perpendicular-borders: $size solid transparent;

	@if $direction == top or $direction == bottom {
		border-left: $perpendicular-borders;
		border-right: $perpendicular-borders;
	}

 @else if $direction == right or $direction == left {
		border-bottom: $perpendicular-borders;
		border-top: $perpendicular-borders;
	}
}

@function opposite-direction($directions) {
	$opposite-directions: ();
	$direction-map: (
		'top': 'bottom',
		'right': 'left',
		'bottom': 'top',
		'left': 'right',
		'center': 'center',
		'ltr': 'rtl',
		'rtl': 'ltr',
	);

	@each $direction in $directions {
		$direction: to-lower-case($direction);

		@if map-has-key($direction-map, $direction) {
			$opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
		}

 @else {
			@warn "No opposite direction can be found for `#{$direction}`. Direction omitted.";
		}
	}

	@return $opposite-directions;
}
